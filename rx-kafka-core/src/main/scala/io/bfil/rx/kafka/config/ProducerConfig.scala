package io.bfil.rx.kafka.config

import com.typesafe.config.Config

object ProducerConfig {
  def apply(config: Config): java.util.Properties =
    new PropertiesBuilder(config).build(Map(
      "bootstrap.servers" -> ("bootstrap.servers", ConfigTypes.String),
      "key.serializer" -> ("key.serializer", ConfigTypes.String),
      "value.serializer" -> ("value.serializer", ConfigTypes.String),
      "acks" -> ("acks", ConfigTypes.Int),
      "buffer.memory" -> ("buffer.memory", ConfigTypes.Int),
      "compression.type" -> ("compression.type", ConfigTypes.String),
      "retries" -> ("retries", ConfigTypes.Int),
      "ssl.key.password" -> ("ssl.key.password", ConfigTypes.String),
      "ssl.keystore.location" -> ("ssl.keystore.location", ConfigTypes.String),
      "ssl.keystore.password" -> ("ssl.keystore.password", ConfigTypes.String),
      "ssl.truststore.location" -> ("ssl.truststore.location", ConfigTypes.String),
      "ssl.truststore.password" -> ("ssl.truststore.password", ConfigTypes.String),
      "batch.size" -> ("batch.size", ConfigTypes.Int),
      "client.id  " -> ("client.id ", ConfigTypes.String),
      "connections.max.idle.ms" -> ("connections.max.idle", ConfigTypes.FiniteDuration),
      "linger.ms" -> ("linger", ConfigTypes.FiniteDuration),
      "max.block.ms" -> ("max.block", ConfigTypes.FiniteDuration),
      "max.request.size" -> ("max.request.size", ConfigTypes.Int),
      "partitioner.class  " -> ("partitioner.class ", ConfigTypes.String),
      "receive.buffer.bytes" -> ("receive.buffer", ConfigTypes.Bytes),
      "request.timeout.ms" -> ("request.timeout", ConfigTypes.FiniteDuration),
      "sasl.jaas.config" -> ("sasl.jaas.config", ConfigTypes.String),
      "sasl.kerberos.service.name" -> ("sasl.kerberos.service.name", ConfigTypes.String),
      "sasl.mechanism" -> ("sasl.mechanism", ConfigTypes.String),
      "security.protocol" -> ("security.protocol", ConfigTypes.String),
      "send.buffer.bytes" -> ("send.buffer", ConfigTypes.Bytes),
      "ssl.enabled.protocols" -> ("ssl.enabled.protocols", ConfigTypes.String),
      "ssl.keystore.type" -> ("ssl.keystore.type", ConfigTypes.String),
      "ssl.protocol" -> ("ssl.protocol", ConfigTypes.String),
      "ssl.provider" -> ("ssl.provider", ConfigTypes.String),
      "ssl.truststore.type" -> ("ssl.truststore.type", ConfigTypes.String),
      "timeout.ms" -> ("timeout", ConfigTypes.FiniteDuration),
      "block.on.buffer.full" -> ("block.on.buffer.full", ConfigTypes.Boolean),
      "interceptor.classes" -> ("interceptor.classes", ConfigTypes.String),
      "max.in.flight.requests.per.connection" -> ("max.in.flight.requests.per.connection", ConfigTypes.Int),
      "metadata.fetch.timeout.ms" -> ("metadata.fetch.timeout", ConfigTypes.FiniteDuration),
      "metadata.max.age.ms" -> ("metadata.max.age", ConfigTypes.FiniteDuration),
      "metric.reporters" -> ("metric.reporters", ConfigTypes.String),
      "metrics.num.samples" -> ("metrics.num.samples", ConfigTypes.Int),
      "metrics.sample.window.ms" -> ("metrics.sample.window", ConfigTypes.FiniteDuration),
      "reconnect.backoff.ms" -> ("reconnect.backoff", ConfigTypes.FiniteDuration),
      "retry.backoff.ms" -> ("retry.backoff", ConfigTypes.FiniteDuration),
      "sasl.kerberos.kinit.cmd" -> ("sasl.kerberos.kinit.cmd", ConfigTypes.String),
      "sasl.kerberos.min.time.before.relogin" -> ("sasl.kerberos.min.time.before.relogin", ConfigTypes.Int),
      "sasl.kerberos.ticket.renew.jitter" -> ("sasl.kerberos.ticket.renew.jitter", ConfigTypes.String),
      "sasl.kerberos.ticket.renew.window.factor" -> ("sasl.kerberos.ticket.renew.window.factor", ConfigTypes.String),
      "ssl.cipher.suites" -> ("ssl.cipher.suites", ConfigTypes.String),
      "ssl.endpoint.identification.algorithm" -> ("ssl.endpoint.identification.algorithm", ConfigTypes.String),
      "ssl.keymanager.algorithm" -> ("ssl.keymanager.algorithm", ConfigTypes.String),
      "ssl.secure.random.implementation" -> ("ssl.secure.random.implementation", ConfigTypes.String),
      "ssl.trustmanager.algorithm" -> ("ssl.trustmanager.algorithm", ConfigTypes.String)
    ))
}